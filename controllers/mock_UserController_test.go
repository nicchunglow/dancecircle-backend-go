// Code generated by mockery v2.30.16. DO NOT EDIT.

package controller

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockUserController is an autogenerated mock type for the UserController type
type MockUserController struct {
	mock.Mock
}

type MockUserController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserController) EXPECT() *MockUserController_Expecter {
	return &MockUserController_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: c
func (_m *MockUserController) CreateUser(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserController_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserController_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - c *fiber.Ctx
func (_e *MockUserController_Expecter) CreateUser(c interface{}) *MockUserController_CreateUser_Call {
	return &MockUserController_CreateUser_Call{Call: _e.mock.On("CreateUser", c)}
}

func (_c *MockUserController_CreateUser_Call) Run(run func(c *fiber.Ctx)) *MockUserController_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockUserController_CreateUser_Call) Return(_a0 error) *MockUserController_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserController_CreateUser_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockUserController_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: c
func (_m *MockUserController) DeleteUser(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserController_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserController_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - c *fiber.Ctx
func (_e *MockUserController_Expecter) DeleteUser(c interface{}) *MockUserController_DeleteUser_Call {
	return &MockUserController_DeleteUser_Call{Call: _e.mock.On("DeleteUser", c)}
}

func (_c *MockUserController_DeleteUser_Call) Run(run func(c *fiber.Ctx)) *MockUserController_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockUserController_DeleteUser_Call) Return(_a0 error) *MockUserController_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserController_DeleteUser_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockUserController_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function with given fields: c
func (_m *MockUserController) GetAllUsers(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserController_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserController_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - c *fiber.Ctx
func (_e *MockUserController_Expecter) GetAllUsers(c interface{}) *MockUserController_GetAllUsers_Call {
	return &MockUserController_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", c)}
}

func (_c *MockUserController_GetAllUsers_Call) Run(run func(c *fiber.Ctx)) *MockUserController_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockUserController_GetAllUsers_Call) Return(_a0 error) *MockUserController_GetAllUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserController_GetAllUsers_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockUserController_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: c
func (_m *MockUserController) GetUser(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserController_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserController_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - c *fiber.Ctx
func (_e *MockUserController_Expecter) GetUser(c interface{}) *MockUserController_GetUser_Call {
	return &MockUserController_GetUser_Call{Call: _e.mock.On("GetUser", c)}
}

func (_c *MockUserController_GetUser_Call) Run(run func(c *fiber.Ctx)) *MockUserController_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockUserController_GetUser_Call) Return(_a0 error) *MockUserController_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserController_GetUser_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockUserController_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: c
func (_m *MockUserController) UpdateUser(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserController_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserController_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - c *fiber.Ctx
func (_e *MockUserController_Expecter) UpdateUser(c interface{}) *MockUserController_UpdateUser_Call {
	return &MockUserController_UpdateUser_Call{Call: _e.mock.On("UpdateUser", c)}
}

func (_c *MockUserController_UpdateUser_Call) Run(run func(c *fiber.Ctx)) *MockUserController_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx))
	})
	return _c
}

func (_c *MockUserController_UpdateUser_Call) Return(_a0 error) *MockUserController_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserController_UpdateUser_Call) RunAndReturn(run func(*fiber.Ctx) error) *MockUserController_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserController creates a new instance of MockUserController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserController {
	mock := &MockUserController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
