// Code generated by mockery v2.30.16. DO NOT EDIT.

package controller

import (
	models "github.com/nicchunglow/dancecircle-backend-go/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: user
func (_m *MockUserRepository) CreateUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *models.User
func (_e *MockUserRepository_Expecter) CreateUser(user interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(user *models.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(_a0 error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(*models.User) error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: user
func (_m *MockUserRepository) DeleteUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - user *models.User
func (_e *MockUserRepository_Expecter) DeleteUser(user interface{}) *MockUserRepository_DeleteUser_Call {
	return &MockUserRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", user)}
}

func (_c *MockUserRepository_DeleteUser_Call) Run(run func(user *models.User)) *MockUserRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) Return(_a0 error) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) RunAndReturn(run func(*models.User) error) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: id, user
func (_m *MockUserRepository) GetUserById(id int, user *models.User) error {
	ret := _m.Called(id, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *models.User) error); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockUserRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - id int
//   - user *models.User
func (_e *MockUserRepository_Expecter) GetUserById(id interface{}, user interface{}) *MockUserRepository_GetUserById_Call {
	return &MockUserRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", id, user)}
}

func (_c *MockUserRepository_GetUserById_Call) Run(run func(id int, user *models.User)) *MockUserRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*models.User))
	})
	return _c
}

func (_c *MockUserRepository_GetUserById_Call) Return(_a0 error) *MockUserRepository_GetUserById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_GetUserById_Call) RunAndReturn(run func(int, *models.User) error) *MockUserRepository_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *MockUserRepository) UpdateUser(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *models.User
func (_e *MockUserRepository_Expecter) UpdateUser(user interface{}) *MockUserRepository_UpdateUser_Call {
	return &MockUserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *MockUserRepository_UpdateUser_Call) Run(run func(user *models.User)) *MockUserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) Return(_a0 error) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) RunAndReturn(run func(*models.User) error) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
